-- MySQL Script generated by MySQL Workbench
-- Tue Apr 26 20:15:32 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema BarMgmt
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `BarMgmt` ;

-- -----------------------------------------------------
-- Schema BarMgmt
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `BarMgmt` DEFAULT CHARACTER SET utf8 ;
USE `BarMgmt` ;

-- -----------------------------------------------------
-- Table `BarMgmt`.`InventoryItem`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BarMgmt`.`InventoryItem` (
  `InventoryItemID` INT NOT NULL AUTO_INCREMENT,
  `ItemType` ENUM("Food", "Drink") NOT NULL,
  `ItemName` VARCHAR(255) NOT NULL,
  `ItemQuantityInStock` INT NOT NULL,
  `ItemLowAmt` INT NULL,
  `ItemOrderAmt` INT NULL,
  PRIMARY KEY (`InventoryItemID`),
  UNIQUE INDEX `ItemName_UNIQUE` (`ItemName` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BarMgmt`.`DrinkDetail`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BarMgmt`.`DrinkDetail` (
  `InventoryItemID` INT NOT NULL,
  `DrinkCategory` ENUM("Water", "SoftDrink", "Alcoholic", "Other") NOT NULL,
  PRIMARY KEY (`InventoryItemID`),
  CONSTRAINT `DrinkDetails_InventoryItem`
    FOREIGN KEY (`InventoryItemID`)
    REFERENCES `BarMgmt`.`InventoryItem` (`InventoryItemID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BarMgmt`.`FoodDetail`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BarMgmt`.`FoodDetail` (
  `InventoryItemID` INT NOT NULL,
  `FoodCategory` ENUM("Appetizer", "Lunch", "Dinner", "Dessert") NOT NULL,
  PRIMARY KEY (`InventoryItemID`),
  CONSTRAINT `FoodDetails_InventoryItem`
    FOREIGN KEY (`InventoryItemID`)
    REFERENCES `BarMgmt`.`InventoryItem` (`InventoryItemID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BarMgmt`.`User`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BarMgmt`.`User` (
  `UserID` INT NOT NULL AUTO_INCREMENT,
  `UserFirstName` VARCHAR(45) NOT NULL,
  `UserLastName` VARCHAR(45) NOT NULL,
  `UserName` VARCHAR(45) NOT NULL,
  `UserPassword` VARCHAR(45) CHARACTER SET 'utf8' COLLATE 'utf8_bin' NOT NULL,
  PRIMARY KEY (`UserID`),
  UNIQUE INDEX `UserName_UNIQUE` (`UserName` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BarMgmt`.`InventoryOrder`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `BarMgmt`.`InventoryOrder` (
  `OrderID` INT NOT NULL AUTO_INCREMENT,
  `OrderDate` DATE NOT NULL,
  `OrderPricePerUnit` DECIMAL(13,2) NOT NULL,
  `OrderQuantity` INT NOT NULL,
  `CompleteDate` DATE NULL,
  `InventoryItemID` INT NOT NULL,
  `UserID` INT NOT NULL,
  PRIMARY KEY (`OrderID`, `InventoryItemID`, `UserID`),
  INDEX `InventoryItemID_idx` (`InventoryItemID` ASC) VISIBLE,
  INDEX `UserID_idx` (`UserID` ASC) VISIBLE,
  CONSTRAINT `Order_InventoryItem`
    FOREIGN KEY (`InventoryItemID`)
    REFERENCES `BarMgmt`.`InventoryItem` (`InventoryItemID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `Order_User`
    FOREIGN KEY (`UserID`)
    REFERENCES `BarMgmt`.`User` (`UserID`)
    ON DELETE RESTRICT
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `BarMgmt` ;

-- -----------------------------------------------------
-- procedure addFood
-- -----------------------------------------------------

DELIMITER $$
USE `BarMgmt`$$
CREATE PROCEDURE `addFood` (IN name VARCHAR(255), IN lowAmt int, IN orderAmt int, IN category enum('Appetizer','Lunch','Dinner','Dessert'))
BEGIN
 DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;  -- rollback any error in the transaction
    END;
	start transaction;
	insert into InventoryItem (ItemType, ItemName, ItemQuantityInStock, ItemLowAmt, ItemOrderAmt) 
		values("Food", name , 0, lowAmt, orderAmt);
	insert into FoodDetail(InventoryItemID, FoodCategory)
		values(LAST_INSERT_ID(), category);
	commit;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addDrink
-- -----------------------------------------------------

DELIMITER $$
USE `BarMgmt`$$
CREATE PROCEDURE `addDrink` (IN name VARCHAR(255), IN lowAmt int, IN orderAmt int, IN category ENUM("Water", "SoftDrink", "Alcoholic", "Other"))
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;  -- rollback any error in the transaction
    END;
	start transaction;
	insert into InventoryItem (ItemType, ItemName, ItemQuantityInStock, ItemLowAmt, ItemOrderAmt) 
		values("Drink", name , 0, lowAmt, orderAmt);
	insert into DrinkDetail(InventoryItemID, DrinkCategory)
		values(LAST_INSERT_ID(), category);
	commit;
END$$

DELIMITER ;
CREATE USER IF NOT EXISTS 'Java' IDENTIFIED BY 'java';

GRANT ALL ON `BarMgmt`.* TO 'Java';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
